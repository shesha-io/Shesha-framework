# Variable 'artifactName' was defined in the Variables tab - test
# Agent Queue 'Azure Pipelines' was used with unrecognized Agent Specification, vmImage property must be specified to determine image - https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#software
variables:
- name: BuildParameters.solution1
  value: Boxfusion.SheshaFunctionalTests.sln
- name: BuildParameters.solution2
  value: ShaCompanyName.ShaProjectName.sln
- name: BuildParameters.configuration
  value: release
- name: pack-version
  value: $(Build.BuildNumber)
- name: isMain
  value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

pr:
  branches:
    exclude:
    - main
    include:
    - releases/*

trigger:
  tags:
    include:
    - '*'
  paths:
    exclude:
    - shesha-core
    - shesha-docs
    - shesha-reactjs
    - .github/workflows
  branches:
    include:
    - releases/*
    # - refs/tags/*
    exclude:
    - main
pool: 
  name: Azure Pipelines
  vmImage1: windows-latest
  vmImage2: ubuntu-latest

# name: 2.0.0.$(BuildID)
stages:
- stage: build
  jobs:
  - job: Job_1
    displayName: Build_Functional_Shesha_API
    pool:
      name: Azure Pipelines
      vmImage: windows-latest
    steps:
    - checkout: self
    - task: UseDotNet@2
      displayName: Use .NET Core sdk 6.x
      inputs:
        version: 6.x
    - task: Assembly-Info-NetCore@3
      displayName: Set Assembly Manifest Data
      inputs:
        InsertAttributes: true
        GeneratePackageOnBuild: false
        PackageRequireLicenseAcceptance: false
        VersionNumber: $(Build.BuildNumber)
        FileVersionNumber: $(Build.BuildNumber)
        InformationalVersion: $(Build.BuildNumber)
        PackageVersion: $(Build.BuildNumber)

    - task: PowerShell@2
      displayName: Check to establish if this pipeline was triggered from a tag  
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          write-host "The build number is: $(Build.BuildNumber)"
          write-host $(Build.SourceBranch)
          $branch = 'Unknown'
          if ("$(Build.SourceBranch)" -like "*tags*"){
              write-host "Source Branch should be tags here: $(Build.SourceBranch)"
              $branch = Invoke-Expression "git branch -r --contains $(Build.SourceBranch)"
              write-host "##vso[task.setvariable variable=currentBranch]$branch"

              $path = $branch
              $version = Split-Path $path -Leaf
              Write-Host $version

              Set-Variable -Name "pack-version" -Value "$version"
          }
          else{
              write-host "Source Branch should be main or releases here: $(Build.SourceBranch)"            
              write-host "##vso[task.setvariable variable=currentBranch]$(Build.SourceBranch)"
          }
        workingDirectory: '$(System.DefaultWorkingDirectory)'      
    - task: PowerShell@2
      displayName: Output to console the current branch  
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          write-host "The current branch is: $(currentBranch)"
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: PowerShell@2
      displayName: Create a txt file to carry the original branch name to the release pipeline  
      inputs:
        targetType: 'inline'
        script: |
          $variable = '$(currentBranch)'
          $variable | Out-File $(Build.ArtifactStagingDirectory)\branchName.txt
          Get-Content $(Build.ArtifactStagingDirectory)\branchName.txt
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: api-info-1'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'api-info-1'
    - task: DotNetCoreCLI@2
      displayName: 'Dotnet Restore'
      inputs:
        command: restore
        projects: shesha-functional-tests/backend/**/*.csproj
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        feedsToUse: 'select'
        vstsFeed: '44b4667a-8963-403d-9962-bde66225adbd'
    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        projects: shesha-functional-tests/backend/Boxfusion.SheshaFunctionalTests.sln
        arguments: --configuration $(BuildParameters.configuration)
    - task: DotNetCoreCLI@2
      displayName: dotnet publish
      inputs:
        command: publish
        publishWebProjects: false
        projects: shesha-functional-tests/backend/Boxfusion.SheshaFunctionalTests.sln
        arguments: --configuration $(BuildParameters.configuration) --output $(build.artifactstagingdirectory) --no-build
        zipAfterPublish: false
        modifyOutputPath: false
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: functional-shesha-api'
      inputs:
        ArtifactName: functional-shesha-api
    - task: DotNetCoreCLI@2
      displayName: dotnet pack
      inputs:
        command: 'pack'
        packagesToPack: 'shesha-functional-tests/backend/src/Module/**/*.csproj'
        configuration: '$(BuildParameters.configuration)'
        nobuild: true
        includesymbols: true
        includesource: true
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'pack-version'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Nuget packs'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'packs-functional'
  - job: Job_2
    displayName: Build_Starter_Shesha_API
    pool:
      name: Azure Pipelines
      vmImage: windows-latest
    steps:
    - checkout: self
    - task: UseDotNet@2
      displayName: Use .NET Core sdk 6.x
      inputs:
        version: 6.x
    - task: Assembly-Info-NetCore@3
      displayName: Set Assembly Manifest Data
      inputs:
        InsertAttributes: true
        GeneratePackageOnBuild: false
        PackageRequireLicenseAcceptance: false
        VersionNumber: $(Build.BuildNumber)
        FileVersionNumber: $(Build.BuildNumber)
        InformationalVersion: $(Build.BuildNumber)
        PackageVersion: $(Build.BuildNumber)

    - task: PowerShell@2
      displayName: Check to establish if this pipeline was triggered from a tag  
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          write-host "The build number is: $(Build.BuildNumber)"
          write-host $(Build.SourceBranch)
          $branch = 'Unknown'
          if ("$(Build.SourceBranch)" -like "*tags*"){
              write-host "Source Branch should be tags here: $(Build.SourceBranch)"
              $branch = Invoke-Expression "git branch -r --contains $(Build.SourceBranch)"
              write-host "##vso[task.setvariable variable=currentBranch]$branch"

              $path = $branch
              $version = Split-Path $path -Leaf
              Write-Host $version

              Set-Variable -Name "pack-version" -Value "$version"
          }
          else{
              write-host "Source Branch should be main or releases here: $(Build.SourceBranch)"            
              write-host "##vso[task.setvariable variable=currentBranch]$(Build.SourceBranch)"
          }
        workingDirectory: '$(System.DefaultWorkingDirectory)'      
    - task: PowerShell@2
      displayName: Output to console the current branch  
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          write-host "The current branch is: $(currentBranch)"
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: PowerShell@2
      displayName: Create a txt file to carry the original branch name to the release pipeline  
      inputs:
        targetType: 'inline'
        script: |
          $variable = '$(currentBranch)'
          $variable | Out-File $(Build.ArtifactStagingDirectory)\branchName.txt
          Get-Content $(Build.ArtifactStagingDirectory)\branchName.txt
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: api-info-2'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'api-info-2'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        feedsToUse: 'select'
        vstsFeed: '44b4667a-8963-403d-9962-bde66225adbd'
    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        projects: shesha-starter/backend/ShaCompanyName.ShaProjectName.sln
        arguments: --configuration $(BuildParameters.configuration)
    - task: DotNetCoreCLI@2
      displayName: dotnet publish
      inputs:
        command: publish
        publishWebProjects: false
        projects: shesha-starter/backend/ShaCompanyName.ShaProjectName.sln
        arguments: --configuration $(BuildParameters.configuration) --output $(build.artifactstagingdirectory) --no-build
        zipAfterPublish: false
        modifyOutputPath: false
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: starter-shesha-api'
      inputs:
        ArtifactName: starter-shesha-api
    - task: DotNetCoreCLI@2
      displayName: dotnet pack
      inputs:
        command: 'pack'
        packagesToPack: 'shesha-starter/backend/src/Module/**/*.csproj'
        configuration: '$(BuildParameters.configuration)'
        nobuild: true
        includesymbols: true
        includesource: true
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'pack-version'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Nuget packs'  
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'packs-starter'
  - job: Job_3
    displayName: Build_Functional_Shesha_AdminPortal
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: PowerShell@2
      displayName: Check to establish if this pipeline was triggered from a tag  
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          write-host $(Build.SourceBranch)
          $branch = 'Unknown'
          if ("$(Build.SourceBranch)" -like "*tags*"){
              write-host "Source Branch should be tags here: $(Build.SourceBranch)"
              $branch = Invoke-Expression "git branch -r --contains $(Build.SourceBranch)"
              write-host "##vso[task.setvariable variable=currentBranch]$branch"

              $path = $branch
              $version = Split-Path $path -Leaf
              Write-Host $version

              Set-Variable -Name "pack-version" -Value "$version"
          }
          else{
              write-host "Source Branch should be main or releases here: $(Build.SourceBranch)"            
              write-host "##vso[task.setvariable variable=currentBranch]$(Build.SourceBranch)"
          }
        workingDirectory: 'shesha-functional-tests/adminportal'
    - task: PowerShell@2
      displayName: Output to console the current branch  
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          write-host "The current branch is: $(currentBranch)"
        workingDirectory: 'shesha-functional-tests/adminportal'
    - task: NodeTool@0
      displayName: 'Use Node 14.21.1'
      inputs:
        versionSpec: 14.21.1
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '2.7.18'
        addToPath: true
        architecture: 'x64'
    - task: Npm@1
      displayName: Install Latest Shesha
      inputs:
        command: custom
        workingDir: 'shesha-functional-tests/adminportal'
        verbose: false
        customCommand: install @shesha/reactjs@latest
    - task: PowerShell@2
      displayName: Set Version for publishing
      inputs:
        targetType: 'inline'
        script: |
          $filePath = "package.json" #filepath
          $Jsonfile = Get-Content $filePath | ConvertFrom-Json
          $version = $Jsonfile.version
          $bumpedVersion = $(pack-version)

          write-host $bumpedVersion
          Write-Host "##vso[task.setvariable variable=version]$bumpedVersion"

          ls
        workingDirectory: 'shesha-functional-tests/adminportal'
    # - task: Npm@1
    #   displayName: Npm Set the version
    #   inputs:
    #     command: custom
    #     workingDir: 'shesha-functional-tests/adminportal'
    #     verbose: true
    #     #customCommand: version --no-git-tag-version #$(pack-version)
    #     customCommand: 'version $(pack-version)'
    - task: Npm@1
      displayName: 'Npm Install'
      inputs:
        command: custom
        workingDir: shesha-functional-tests/adminportal
        verbose: false
        customCommand: 'install --legacy-peer-deps'        
    - task: Npm@1
      displayName: Npm Build
      inputs:
        command: custom
        workingDir: 'shesha-functional-tests/adminportal'
        verbose: true
        customCommand: run build
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'shesha-functional-tests/adminportal'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: shesha-adminportal-functional'
      inputs:
        ArtifactName: adminportal-functional
  - job: Job_4
    displayName: Build_Starter_Shesha_AdminPortal
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: PowerShell@2
      displayName: Check to establish if this pipeline was triggered from a tag  
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          write-host $(Build.SourceBranch)
          $branch = 'Unknown'
          if ("$(Build.SourceBranch)" -like "*tags*"){
              write-host "Source Branch should be tags here: $(Build.SourceBranch)"
              $branch = Invoke-Expression "git branch -r --contains $(Build.SourceBranch)"
              write-host "##vso[task.setvariable variable=currentBranch]$branch"

              $path = $branch
              $version = Split-Path $path -Leaf
              Write-Host $version

              Set-Variable -Name "pack-version" -Value "$version"
          }
          else{
              write-host "Source Branch should be main or releases here: $(Build.SourceBranch)"            
              write-host "##vso[task.setvariable variable=currentBranch]$(Build.SourceBranch)"
          }
        workingDirectory: 'shesha-starter/frontend'
    - task: PowerShell@2
      displayName: Output to console the current branch  
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          write-host "The current branch is: $(currentBranch)"
        workingDirectory: 'shesha-starter/frontend'
    - task: NodeTool@0
      displayName: 'Use Node 14.21.1'
      inputs:
        versionSpec: 14.21.1
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '2.7.18'
        addToPath: true
        architecture: 'x64'
    - task: Npm@1
      displayName: Install Latest Shesha
      inputs:
        command: custom
        workingDir: 'shesha-starter/frontend'
        verbose: false
        customCommand: install @shesha/reactjs@latest
    - task: PowerShell@2
      displayName: Set Version for publishing
      inputs:
        targetType: 'inline'
        script: |
          $filePath = "package.json" #filepath
          $Jsonfile = Get-Content $filePath | ConvertFrom-Json
          $version = $Jsonfile.version
          $bumpedVersion = $(pack-version)

          write-host $bumpedVersion
          Write-Host "##vso[task.setvariable variable=version]$bumpedVersion"

          ls
        workingDirectory: 'shesha-starter/frontend'

    # - task: Npm@1
    #   displayName: Npm Set the version
    #   inputs:
    #     command: custom
    #     workingDir: 'shesha-starter/frontend'
    #     verbose: true
    #     #customCommand: version --no-git-tag-version #$(pack-version)
    #     customCommand: 'version $(pack-version)'
    - task: Npm@1
      displayName: 'Npm Install'
      inputs:
        command: custom
        workingDir: 'shesha-starter/frontend'
        verbose: false
        customCommand: 'install --legacy-peer-deps'
    - task: Npm@1
      displayName: Npm Build
      inputs:
        command: custom
        workingDir: 'shesha-starter/frontend'
        verbose: true
        customCommand: run build
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'shesha-starter/frontend'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/shesha-adminportal-starter.zip'
        replaceExistingArchive: true  
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: shesha-adminportal-starter'
      inputs:
        ArtifactName: adminportal-starter
