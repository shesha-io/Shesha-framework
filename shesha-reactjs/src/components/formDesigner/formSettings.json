{
  "components": [
    {
      "id": "ee6a9269-0e8e-41db-b6e0-069036accb19",
      "type": "autocomplete",
      "propertyName": "modelType",
      "label": "Entity",
      "labelAlign": "right",
      "parentId": "root",
      "hidden": false,
      "dataSourceType": "url",
      "dataSourceUrl": "/api/services/app/Metadata/TypeAutocomplete",
      "validate": {},
      "useRawValues": true,
      "version": 4,
      "settingsValidationErrors": []
    },
    {
      "id": "077f5a0d-d59e-44b8-bc5b-a06e18438f4d",
      "type": "dropdown",
      "propertyName": "layout",
      "label": "Layout",
      "labelAlign": "right",
      "parentId": "root",
      "hidden": false,
      "validate": {
        "required": true
      },
      "dataSourceType": "values",
      "values": [
        {
          "id": "3f7bd074-37e6-450c-8106-95e8d8164ada",
          "label": "horizontal",
          "value": "horizontal"
        },
        {
          "id": "5709e098-7c1d-4a27-92e5-f25e998c26fd",
          "label": "vertical",
          "value": "vertical"
        }
      ],
      "version": 5,
      "referenceListId": null,
      "valueFormat": "listItem"
    },
    {
      "id": "8615d12f-6ea0-4b11-a1a1-6088c7160fd9",
      "type": "dropdown",
      "propertyName": "size",
      "parentId": "root",
      "label": "Size",
      "allowClear": true,
      "values": [
        {
          "label": "Small",
          "value": "small",
          "id": "4f11403c-95fd-4e49-bb60-cb8c25f0f3c3"
        },
        {
          "label": "Middle",
          "value": "middle",
          "id": "8f85c476-e632-4fa7-89ad-2be6cfb7f1f1"
        },
        {
          "label": "Large",
          "value": "large",
          "id": "f01e54aa-a1a4-4bd6-ba73-c395e48af8ce"
        }
      ],
      "dataSourceType": "values",
      "version": 5,
      "referenceListId": null,
      "valueFormat": "listItem"
    },
    {
      "id": "b6bdf196-769f-4bce-b488-9ca50ad16176",
      "type": "checkbox",
      "propertyName": "colon",
      "label": "Colon",
      "labelAlign": "right",
      "parentId": "root",
      "hidden": false,
      "description": "Configure the default value of colon for Form.Item. Indicates whether the colon after the label is displayed (only effective when prop layout is horizontal)",
      "validate": {},
      "version": 2
    },
    {
      "id": "493e12cd-d4ab-4f2a-8c08-3a20ce0f617e",
      "type": "numberField",
      "propertyName": "labelCol.span",
      "label": "Label span",
      "labelAlign": "right",
      "parentId": "root",
      "hidden": false,
      "validate": {},
      "description": "Raster number of cells to occupy, 0 corresponds to display: none",
      "version": 2
    },
    {
      "id": "99c93c99-0005-429e-8f71-e899230f1c6e",
      "type": "numberField",
      "propertyName": "wrapperCol.span",
      "label": "Component span",
      "labelAlign": "right",
      "parentId": "root",
      "hidden": false,
      "validate": {},
      "description": "Raster number of cells to occupy, 0 corresponds to display: none",
      "version": 2
    },
    {
      "id": "0e3231f1-e158-427a-b32b-00ff9da941bb",
      "type": "checkbox",
      "propertyName": "excludeFormFieldsInPayload",
      "label": "Exclude '_formFields' in the payload?",
      "labelAlign": "right",
      "parentId": "root",
      "hidden": false,
      "description": "Whether or not _formFields should be included in the payload. By default it is included.",
      "validate": {},
      "version": 2
    },
    {
      "id": "63f3360d-1e54-4a79-a888-8cd23b0bedd5",
      "type": "propertyAutocomplete",
      "propertyName": "fieldsToFetch",
      "label": "Additional fields for fetch",
      "mode": "multiple",
      "labelAlign": "right",
      "hidden": false,
      "validate": {},
      "settingsValidationErrors": [],
      "description": "A list of fields you want to fetch",
      "parentId": "root",
      "version": 1
    },
    {
      "id": "52f4460d-2e64-4d79-a900-7cd28b0bebd3",
      "type": "propertyAutocomplete",
      "propertyName": "formKeysToPersist",
      "label": "Persisted properties",
      "mode": "tags",
      "labelAlign": "right",
      "hidden": false,
      "validate": {},
      "settingsValidationErrors": [],
      "description": "A list of form properties you want persisted",
      "parentId": "root",
      "version": 1
    },
    {
      "id": "ad28d795-92d8-4470-a87e-603822368cc8",
      "type": "textField",
      "propertyName": "uniqueFormId",
      "label": "Unique Form Id",
      "labelAlign": "right",
      "parentId": "root",
      "hidden": {
        "_code": "return  !getSettingValue(data?.formKeysToPersist?.length);",
        "_mode": "code",
        "_value": false
      },
      "validate": {
        "required": true
      },
      "description": "This is very important since some form are rendered using the markup, in which case they wouldn't have the path or id that could be used as a unique id of the form",
      "version": 3,
      "textType": "text"
    },
    {
      "id": "6c121baa-57e3-4965-a429-0632dadc2a99",
      "type": "labelValueEditor",
      "propertyName": "initialValues",
      "parentId": "root",
      "label": "Initial Values",
      "labelTitle": "Key",
      "labelName": "key",
      "valueTitle": "Value",
      "valueName": "value",
      "ignorePrefixesOnNewItems": true,
      "exposedVariables": [
        {
          "name": "data",
          "description": "The form data",
          "type": "object"
        },
        {
          "name": "parentFormValues",
          "description": "Parent form values. The values of the form rendering the dialog.",
          "type": "object"
        },
        {
          "name": "globalState",
          "description": "The global state of the application",
          "type": "object"
        },
        {
          "name": "query",
          "description": "Query parameters from the address bar",
          "type": "object"
        }
      ],
      "description": "Enter values that you would like passed to the server as payload. Note that you can also use Mustache expression as in {{parent.id}}. Also you can use dot notation such as query.name",
      "version": 2,
      "mode": "dialog",
      "settingsValidationErrors": []
    },
    {
      "id": "fcfccb85-8fc3-436b-9f87-17e189bc3cdc",
      "type": "codeEditor",
      "propertyName": "preparedValues",
      "label": "Prepared Values",
      "labelAlign": "right",
      "parentId": "root",
      "hidden": false,
      "autoSize": false,
      "showCount": false,
      "allowClear": false,
      "validate": {},
      "exposedVariables": [
        {
          "name": "data",
          "description": "The form data",
          "type": "object"
        },
        {
          "name": "moment",
          "description": "The moment.js object",
          "type": "object"
        },
        {
          "name": "parentFormValues",
          "description": "Parent form values. The values of the form rendering the dialog.",
          "type": "object"
        },
        {
          "name": "globalState",
          "description": "The global state of the application",
          "type": "object"
        },
        {
          "name": "initialValues",
          "description": "Initial values",
          "type": "object"
        }
      ],
      "description": "Write a code that allows you to return an object whose values will be merged with the form state before submit. Check the variables tab for exposed variables",
      "version": 3,
      "settingsValidationErrors": [],
      "placeholder": "",
      "mode": "dialog",
      "wrapInTemplate": true,
      "templateSettings": {
        "useAsyncDeclaration": true,
        "functionName": "getValues"
      },
      "availableConstants": {
        "_mode": "code",
        "_code": "    /*\r\n    data // The form data\r\n    moment // The moment.js object\r\n    parentFormValues // Parent form values. The values of the form rendering the dialog.\r\n    globalState // The global state of the application\r\n    initialValues // Initial values\r\n    */\r\n    const trace = (prop, value) => {\r\n        console.log(`CL: ${prop} = '${value}'`);\r\n    };\r\n    //console.log(`CL: data.modelType = '${data.modelType}'`);\r\n    trace(\"data.modelType\", data.modelType);\r\n    trace(\"formMode\", formMode);\r\n    trace(\"application\", application);\r\n    trace(\"moment\", moment);\r\n    trace(\"globalState\", globalState);\r\n    trace(\"initialValues\", initialValues);\r\n    trace(\"parentFormValues\", parentFormValues);\r\n\r\n    /*\r\n    builder.addEntity(data.modelType)\r\n    return builder.build();\r\n    */\r\n\r\n    return undefined;"
      },
      "availableConstantsExpression": "    const { modelType } = data ?? {};\r\n    const mb = metadataBuilder;\r\n    if (modelType){\r\n        await mb.addEntityAsync(\"data\", \"Form data\", modelType);\r\n        await mb.addEntityAsync(\"initialValues\", \"Initial values\", modelType);\r\n    } else {\r\n        mb.addObject(\"data\", \"Form data\");\r\n        mb.addObject(\"initialValues\", \"Initial values\");    \r\n    };\r\n    mb.addObject(\"parentFormValues\", \"Parent form values. The values of the form rendering the dialog.\");\r\n    mb.addStandard([\"shesha:globalState\", \"shesha:moment\", \"shesha:application\"]);\r\n    return mb.build();",
      "language": "typescript"
    },
    {
      "id": "055f85e2-f2f1-4a88-95ad-0d1afb81cae7",
      "type": "codeEditor",
      "propertyName": "onInitialized",
      "label": "On Initialized",
      "labelAlign": "right",
      "parentId": "root",
      "hidden": false,
      "autoSize": false,
      "showCount": false,
      "allowClear": false,
      "validate": {},
      "exposedVariables": [
        {
          "name": "contexts",
          "description": "Contexts data",
          "type": "object"
        },
        {
          "name": "formContext",
          "description": "Contexts data of current form",
          "type": "object"
        },
        {
          "name": "moment",
          "description": "The moment.js object",
          "type": "object"
        },
        {
          "name": "parentFormValues",
          "description": "Parent form values. The values of the form rendering the dialog.",
          "type": "object"
        },
        {
          "name": "globalState",
          "description": "The global state of the application",
          "type": "object"
        },
        {
          "name": "initialValues",
          "description": "Initial values",
          "type": "object"
        },
        {
          "name": "http",
          "description": "axios instance used to make http requests",
          "type": "object"
        },
        {
          "name": "message",
          "description": "This is the Ant API for displaying toast messages. See: https://ant.design/components/message/#header",
          "type": "object"
        },
        {
          "name": "form",
          "description": "The form instance",
          "type": "object"
        },
        {
          "name": "setGlobalState",
          "description": "Setting the global state of the application",
          "type": "(payload: { key: string, data: any } ) => void"
        }
      ],
      "description": "This action will be executed the first time the form loads. Just before any API call has been made. At this stage, the form has no data except for initialValues if passed",
      "version": 3,
      "settingsValidationErrors": [],
      "placeholder": "",
      "mode": "dialog",
      "wrapInTemplate": true,
      "templateSettings": {
        "useAsyncDeclaration": true,
        "functionName": "onInitialized"
      },
      "availableConstants": {
        "_mode": "code",
        "_code": "    /*\r\n    moment // The moment.js object\r\n    parentFormValues // Parent form values. The values of the form rendering the dialog.\r\n    globalState // The global state of the application\r\n    initialValues // Initial values\r\n    http //axios instance used to make http requests\r\n    message\r\n    form\r\n    setGlobalState\r\n    */\r\n    return undefined;"
      },
      "availableConstantsExpression": "    const { modelType } = data ?? {};\r\n    const mb = metadataBuilder;\r\n    if (modelType){\r\n        await mb.addEntityAsync(\"data\", \"Form data\", modelType);\r\n        await mb.addEntityAsync(\"initialValues\", \"Initial values\", modelType);\r\n    } else {\r\n        mb.addObject(\"data\", \"Form data\");\r\n        mb.addObject(\"initialValues\", \"Initial values\");    \r\n    };\r\n    mb.addObject(\"parentFormValues\", \"Parent form values. The values of the form rendering the dialog.\");\r\n    \r\n    mb.addStandard([\r\n        \"shesha:form\",\r\n        \"shesha:globalState\", \r\n        \"shesha:setGlobalState\",\r\n        \"shesha:http\",\r\n        \"shesha:message\",\r\n        \"shesha:formContext\", \r\n        \"shesha:contexts\", \r\n        \"shesha:moment\", \r\n        \"shesha:application\",\r\n    ]);\r\n    return mb.build();",
      "language": "typescript"
    },
    {
      "id": "087a4e7d-ff28-4175-9221-61bef0bbaea2",
      "type": "codeEditor",
      "propertyName": "onDataLoaded",
      "label": "On Data Loaded",
      "labelAlign": "right",
      "parentId": "root",
      "hidden": false,
      "autoSize": false,
      "showCount": false,
      "allowClear": false,
      "validate": {},
      "exposedVariables": [
        {
          "name": "data",
          "description": "Fetched data from the server",
          "type": "object"
        },
        {
          "name": "moment",
          "description": "The moment.js object",
          "type": "object"
        },
        {
          "name": "globalState",
          "description": "The global state of the application",
          "type": "object"
        },
        {
          "name": "http",
          "description": "axios instance used to make http requests",
          "type": "object"
        },
        {
          "name": "initialValues",
          "description": "Initial values passsed to the form. In most cases, it's the selected row in a case where an action column is the one triggering the form displaying on the dialog",
          "type": "object"
        },
        {
          "name": "message",
          "description": "This is the Ant API for displaying toast messages. See: https://ant.design/components/message/#header",
          "type": "object"
        },
        {
          "name": "form",
          "description": "The form instance",
          "type": "object"
        },
        {
          "name": "setGlobalState",
          "description": "Setting the global state of the application",
          "type": "(payload: { key: string, data: any } ) => void"
        }
      ],
      "description": "This action will be executed immediately after the data has been loaded (Fetched from the API)",
      "version": 3,
      "settingsValidationErrors": [],
      "placeholder": "",
      "mode": "dialog",
      "wrapInTemplate": true,
      "templateSettings": {
        "useAsyncDeclaration": true,
        "functionName": "onDataLoaded"
      },
      "availableConstants": {
        "_mode": "code",
        "_code": "    /*\r\n    data\r\n    moment // The moment.js object\r\n    globalState // The global state of the application\r\n    initialValues // Initial values\r\n    http //axios instance used to make http requests\r\n    message\r\n    form\r\n    setGlobalState\r\n    */\r\n    return undefined;"
      },
      "availableConstantsExpression": "    const { modelType } = data ?? {};\r\n    const mb = metadataBuilder;\r\n    if (modelType){\r\n        await mb.addEntityAsync(\"data\", \"Form data\", modelType);\r\n        await mb.addEntityAsync(\"initialValues\", \"Initial values\", modelType);\r\n    } else {\r\n        mb.addObject(\"data\", \"Form data\");\r\n        mb.addObject(\"initialValues\", \"Initial values\");    \r\n    };\r\n    \r\n    mb.addStandard([\r\n        \"shesha:form\",\r\n        \"shesha:globalState\", \r\n        \"shesha:setGlobalState\",\r\n        \"shesha:http\",\r\n        \"shesha:message\",\r\n        \"shesha:moment\",\r\n        \"shesha:application\",\r\n    ]);\r\n    return mb.build();",
      "language": "typescript"
    },
    {
      "id": "5092dd2b-c514-4b06-bfb5-546ce94fab97",
      "type": "codeEditor",
      "propertyName": "onUpdate",
      "label": "On Update",
      "labelAlign": "right",
      "parentId": "root",
      "hidden": false,
      "autoSize": false,
      "showCount": false,
      "allowClear": false,
      "validate": {},
      "exposedVariables": [
        {
          "name": "data",
          "description": "The form data",
          "type": "object"
        },
        {
          "name": "moment",
          "description": "The moment.js object",
          "type": "object"
        },
        {
          "name": "parentFormValues",
          "description": "Parent form values. The values of the form rendering the dialog.",
          "type": "object"
        },
        {
          "name": "globalState",
          "description": "The global state of the application",
          "type": "object"
        },
        {
          "name": "initialValues",
          "description": "Initial values",
          "type": "object"
        },
        {
          "name": "http",
          "description": "axios instance used to make http requests",
          "type": "object"
        },
        {
          "name": "message",
          "description": "This is the Ant API for displaying toast messages. See: https://ant.design/components/message/#header",
          "type": "object"
        },
        {
          "name": "setFormData",
          "description": "A function used to update the form data",
          "type": "({ values: object, mergeValues: boolean}) => void"
        },
        {
          "name": "setGlobalState",
          "description": "Setting the global state of the application",
          "type": "(payload: { key: string, data: any } ) => void"
        }
      ],
      "description": "This action will be executed whenever the form updates",
      "version": 3,
      "settingsValidationErrors": [],
      "placeholder": "",
      "mode": "dialog",
      "wrapInTemplate": true,
      "templateSettings": {
        "functionName": "onUpdate"
      },
      "availableConstants": {
        "_mode": "code",
        "_code": "    /*\r\n    data\r\n    moment // The moment.js object\r\n    parentFormValues\r\n    globalState // The global state of the application\r\n    initialValues // Initial values\r\n    http //axios instance used to make http requests\r\n    message\r\n    setFormData\r\n    setGlobalState\r\n    */\r\n    return undefined;"
      },
      "availableConstantsExpression": "    const { modelType } = data ?? {};\r\n    const mb = metadataBuilder;\r\n    if (modelType){\r\n        await mb.addEntityAsync(\"data\", \"Form data\", modelType);\r\n        await mb.addEntityAsync(\"initialValues\", \"Initial values\", modelType);\r\n    } else {\r\n        mb.addObject(\"data\", \"Form data\");\r\n        mb.addObject(\"initialValues\", \"Initial values\");    \r\n    };\r\n    mb.addObject(\"parentFormValues\", \"Parent form values. The values of the form rendering the dialog.\");\r\n    \r\n    mb.addStandard([\r\n        \"shesha:form\",\r\n        \"shesha:globalState\", \r\n        \"shesha:setGlobalState\",\r\n        \"shesha:http\",\r\n        \"shesha:message\",\r\n        \"shesha:moment\",\r\n        \"shesha:application\",\r\n    ]);\r\n    return mb.build();",
      "language": "typescript"
    },
    {
      "id": "Q6s-GKx4El9BhcH9MQ8bj",
      "type": "collapsiblePanel",
      "propertyName": "collapsiblePanel1",
      "label": "Advanced Settings...",
      "labelAlign": "right",
      "parentId": "root",
      "hidden": false,
      "isDynamic": false,
      "expandIconPosition": "end",
      "settingsValidationErrors": [],
      "collapsedByDefault": true,
      "version": 4,
      "header": {
        "id": "Ck5P-EpUBUq4b7BUdi4Rchr6Fb_0u3",
        "components": []
      },
      "content": {
        "id": "IUbL5u-qUoKAAXvV51xWFnn9qn-17x",
        "components": [
          {
            "id": "y3d0ny6_gznxiEEHFa1ZG",
            "type": "endpointsAutocomplete",
            "propertyName": "postUrl",
            "label": "Custom Create Url",
            "labelAlign": "right",
            "parentId": "IUbL5u-qUoKAAXvV51xWFnn9qn-17x",
            "hidden": false,
            "isDynamic": false,
            "placeholder": "",
            "description": "Check the 'URL variables' tab for the exposed variables. Live empty to use default endpoint.",
            "validate": {
              "minLength": "",
              "maxLength": "",
              "message": ""
            },
            "quickviewWidth": "",
            "prefix": "POST",
            "suffix": "",
            "initialValue": "",
            "settingsValidationErrors": [],
            "version": 2
          },
          {
            "id": "oamRBlEs6O2Jlc2FGL_gY",
            "type": "endpointsAutocomplete",
            "propertyName": "getUrl",
            "label": "Custom Read Url",
            "labelAlign": "right",
            "parentId": "IUbL5u-qUoKAAXvV51xWFnn9qn-17x",
            "hidden": false,
            "isDynamic": false,
            "placeholder": "",
            "description": "Check the 'URL variables' tab for the exposed variables. Live empty to use default endpoint.",
            "validate": {
              "minLength": "",
              "maxLength": "",
              "message": ""
            },
            "quickviewWidth": "",
            "prefix": "GET",
            "suffix": "",
            "initialValue": "",
            "settingsValidationErrors": [],
            "version": 2
          },
          {
            "id": "pooSZYaENGyIjZFy6gH9G",
            "type": "endpointsAutocomplete",
            "propertyName": "putUrl",
            "label": "Custom Update Url",
            "labelAlign": "right",
            "parentId": "IUbL5u-qUoKAAXvV51xWFnn9qn-17x",
            "hidden": false,
            "isDynamic": false,
            "placeholder": "",
            "description": "Check the 'URL variables' tab for the exposed variables. Live empty to use default endpoint.",
            "validate": {
              "minLength": "",
              "maxLength": "",
              "message": ""
            },
            "quickviewWidth": "",
            "prefix": "PUT",
            "suffix": "",
            "initialValue": "",
            "settingsValidationErrors": [],
            "version": 2
          },
          {
            "id": "Qlyg6-hRbU8Q287-P_Fr7",
            "type": "endpointsAutocomplete",
            "propertyName": "deleteUrl",
            "label": "Custom Delete Url",
            "labelAlign": "right",
            "parentId": "IUbL5u-qUoKAAXvV51xWFnn9qn-17x",
            "hidden": false,
            "isDynamic": false,
            "placeholder": "",
            "description": "Check the 'URL variables' tab for the exposed variables. Live empty to use default endpoint.",
            "validate": {
              "minLength": "",
              "maxLength": "",
              "message": ""
            },
            "quickviewWidth": "",
            "prefix": "DELETE",
            "suffix": "",
            "initialValue": "",
            "settingsValidationErrors": [],
            "version": 2
          }
        ]
      },
      "collapsible": "icon"
    }
  ],
  "formSettings": {
    "layout": "horizontal",
    "colon": true,
    "labelCol": {
      "span": 5
    },
    "wrapperCol": {
      "span": 19
    }
  }
}